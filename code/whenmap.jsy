const _when_fns = new WeakMap()

export class WhenMap extends Map ::
  has(key) ::
    let p = super.get(key)
    return p ? _when_fns.has(p) ? 1 : true : false

  get get() :: return this.when
  when(key) ::
    let p = super.get(key), f
    if ! p ::
      p = new Promise(fn => f=fn)
      _when_fns.set(p, f)
      super.set(key, p)
    return p

  set(key, val) ::
    // resolve promise
    _pop_when(this.when(key))?.(val)
    return this

  delete(key) ::
    // resolve outstanding promise, if exists
    _pop_when(super.get(key))?.()
    return super.delete(key)

  clear() ::
    // resolve all outstanding promises
    for let p of this.values() ::
      _pop_when(p)?.()
    super.clear()

export default WhenMap


function _pop_when(p) ::
  let f = _when_fns.get(p)
  _when_fns.delete(p)
  return f

